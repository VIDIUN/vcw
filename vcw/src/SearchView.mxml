<?xml version="1.0" encoding="utf-8"?>
<importViews:ImportModule styleName="searchView" width="100%" height="100%"
						  xmlns="com.vidiun.contributionWizard.view.importViews.search.*"
						  xmlns:mx="http://www.adobe.com/2006/mxml"
						  xmlns:importViews="com.vidiun.contributionWizard.view.importViews.*"
						  xmlns:searchResultsView="com.vidiun.contributionWizard.view.importViews.search.searchResultsView.*"
						  xmlns:controller="com.vidiun.contributionWizard.view.controller.*"
						  xmlns:controls="com.vidiun.contributionWizard.view.importViews.search.controls.*"
						  xmlns:utils="adobe.utils.*" xmlns:control="com.vidiun.contributionWizard.control.*"
						  xmlns:browser="com.vidiun.contributionWizard.view.importViews.browser.*"
						  xmlns:ac="com.adobe.ac.*">

	<mx:Script>
		<![CDATA[
			import com.vidiun.contributionWizard.view.importViews.search.PrivateAuthenticationScreen;
			import com.vidiun.contributionWizard.vo.limitations.LimitationError;
			import com.vidiun.contributionWizard.view.importViews.browser.NavigationButtonsMode;
			import com.vidiun.contributionWizard.view.events.ImportViewCompleteEvent;
			import com.vidiun.contributionWizard.view.events.VCWViewEvent;
			import com.bjorn.event.EventChainFactory;
			import com.bjorn.event.ChainEvent;
			import flash.utils.setTimeout;
			import mx.managers.IFocusManagerComponent;
			import com.vidiun.contributionWizard.vo.providers.MediaProviderVO;
			import com.hurlant.crypto.symmetric.ECBMode;
			import com.adobe_cw.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.vidiun.contributionWizard.model.WizardModelLocator;
			import com.vidiun.contributionWizard.events.MediaInfoEvent;
			import com.vidiun.contributionWizard.vo.PageSearchDirection;
			import com.vidiun.contributionWizard.events.SearchMediaEvent;
			import com.vidiun.contributionWizard.view.resources.ResourceBundleNames;
			import mx.managers.PopUpManager;
			import com.arc90.modular.CairngormEventDispatcherFactory;
			import mx.core.Application;
			import mx.controls.Alert;
			import com.vidiun.contributionWizard.events.AuthMethodEvent;
			import com.vidiun.contributionWizard.view.events.AuthenticatedSearchViewEvent;

			//Start of MediaInfoViewController handlers
			//TODO: The adult content handling should not be handled in two places
			private var _authenticationScreen:PrivateAuthenticationScreen = new PrivateAuthenticationScreen();
			[Bindable]
			private var model:WizardModelLocator = WizardModelLocator.getInstance();

			[Bindable]
			private var _mediaProvider:MediaProviderVO;


			//-----------------------------interface methods------------------------------------------
			override public function goNextStep():void {
				if (!model.importData.importCart.isCartEmpty) {
					deactivateSearchResultsView()
					dispatchGetMediaInfo();
				}
			}


			override public function mediaProviderChange(mediaProviderVo:MediaProviderVO):void {
				_mediaProvider = mediaProviderVo;
				var focusComp:IFocusManagerComponent = focusManager.getNextFocusManagerComponent();
				var setFocusFunc:Function = function():void {
					searchControls.searchFields.searchTerms.setFocus()
				};
				callLater(setFocusFunc);
			}

			//----------------------------- end interface methods ------------------------------------------
			
			
			private function mediaInfoCompleteHandler():void {
				dispatchEvent(new ImportViewCompleteEvent(ImportViewCompleteEvent.IMPORT_VIEW_COMPLETE));
			}


			private function dispatchGetMediaInfo():void {
				var evtGetMediaInfo:MediaInfoEvent = new MediaInfoEvent(MediaInfoEvent.GET_MEDIA_INFO, model.importData.importCart.importItemsArray, this);
				CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(evtGetMediaInfo);
			}


			private function mediaInfoErrorHandler(errorCode:String):void {
				var message:String = resourceManager.getString(ResourceBundleNames.ERRORS, errorCode);
				Alert.show(message);
			}


			override public function activate():void {
				trace("Search activate()");
			}


			override public function get navigationButtonsMode():NavigationButtonsMode {
				return navButtonsMode;
			}

			//----------------------------- End MediaInfoViewController handlers ------------------------------------------


//TODO Atar: not used?
//			private function authenticatedSearchHandler(evtPrivateSearch:AuthenticatedSearchViewEvent):void {
//				showLoginScreen();
//			}


//			private function dispatchToggleAuthMethod():void {
//				var event:AuthMethodEvent = new AuthMethodEvent(AuthMethodEvent.TOGGLE_AUTH_METHOD, this);
//				CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(event);
//			}


			/**
			 * show the login screen
			 * */
			private function showLoginScreen():void {
				_authenticationScreen.owner = this;
				_authenticationScreen.addEventListener(AuthenticatedSearchViewEvent.LOGIN_SUCCESS, loginSuccessHandler);
				PopUpManager.addPopUp(_authenticationScreen, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(_authenticationScreen);
			}


			/**
			 * 
			 * */
			private function loginSuccessHandler(evtLoginSuccess:AuthenticatedSearchViewEvent):void {
				CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(new SearchMediaEvent(SearchMediaEvent.SET_SEARCH_TERMS, 0, "", this));
				dispatchCairngormSearchRequest(PageSearchDirection.FIRST_PAGE);
			}



			private function dispatchCairngormSearchRequest(pageDirection:int):void {
				if (pageDirection == PageSearchDirection.FIRST_PAGE)
					deactivateSearchResultsView();
				
				var evtSearchMedia:SearchMediaEvent = new SearchMediaEvent(SearchMediaEvent.SEARCH_MEDIA, pageDirection, null, this);
				if (pageDirection == PageSearchDirection.FIRST_PAGE) {
					var moderateSearchTermsEvent:SearchMediaEvent = new SearchMediaEvent(SearchMediaEvent.MODERATE_SEARCH_TERMS);
					var sequence:ChainEvent = EventChainFactory.chainEvents([moderateSearchTermsEvent, evtSearchMedia]);
					CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(sequence);
				}
				else {
					CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(evtSearchMedia);
				}
			}


			private function toggleAuthMethodHandler():void {
				var evtToggleAuthMethod:AuthMethodEvent = new AuthMethodEvent(AuthMethodEvent.TOGGLE_AUTH_METHOD, this);
				CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(evtToggleAuthMethod);
			}


			private function deactivateSearchResultsView():void {
				searchResults.deactivate();
			}


			private function limitationError():void {
				var error:LimitationError = model.limitationError;
				Alert.show(error ? error.message : "error");
			}
		]]>
	</mx:Script>

	<ac:ObserveValue source="{model.limitationIsValid}" value="{false}" handler="limitationError"/>

	<browser:NavigationButtonsMode id="navButtonsMode" nextExists="true" nextEnabled="{importItems.length > 0}"
								   nextText="{resourceManager.getString(ResourceBundleNames.IMPORT_BROWSER, 'NEXT')}"
								   prevEnabled="false" prevExists="true"
								   prevText="{resourceManager.getString(ResourceBundleNames.IMPORT_BROWSER, 'BACK')}"/>

	<!--Cairngorm controller-->
	<control:SimpleSearchController/>
	
	<!--view-->
	<searchResultsView:Header activeMediaProvider="{model.mediaProviders.activeMediaProvider}"/>

	<controller:MediaInfoViewController token="{this}" mediaInfoComplete="mediaInfoCompleteHandler()"
										mediaInfoError="mediaInfoErrorHandler(event.errorCode)"/>

	<controller:ToggleAuthMethodViewController token="{this}" showAuthenticationScreen="showLoginScreen()"/>

	<controls:SearchControls id="searchControls" width="100%" toggleAuthMethod="toggleAuthMethodHandler()"
							 search="dispatchCairngormSearchRequest(PageSearchDirection.FIRST_PAGE)"
							 goNextPage="dispatchCairngormSearchRequest(PageSearchDirection.NEXT_PAGE)"
							 goPreviousPage="dispatchCairngormSearchRequest(PageSearchDirection.PREVIOUS_PAGE)"/>

	<searchResultsView:SearchResultsView id="searchResults" width="100%" height="100%"
										 dataProvider="{model.searchData.searchResults.pager.visiblePageData}"/>

</importViews:ImportModule>
